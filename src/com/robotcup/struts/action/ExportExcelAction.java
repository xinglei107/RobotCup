/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.robotcup.struts.action;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;
import org.springframework.stereotype.Controller;

import com.robotcup.domain.TeamAdmin;
import com.robotcup.domain.TeamItems;
import com.robotcup.pojo.ItemInfo;
import com.robotcup.pojo.TeamApp;
import com.robotcup.pojo.TeamInfo;
import com.robotcup.service.imp.ExecuteQueryImp;
import com.robotcup.util.ExportExcel;

/**
 * MyEclipse Struts Creation date: 04-28-2014
 * 
 * XDoclet definition:
 * 
 * @struts.action
 */
@Controller
public class ExportExcelAction extends DispatchAction {
	/*
	 * Generated Methods
	 */

	/**
	 * Method execute
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	@Resource
	private ExecuteQueryImp executeQueryImp;

	public ExecuteQueryImp getExecuteQueryImp() {
		return executeQueryImp;
	}

	public void setExecuteQueryImp(ExecuteQueryImp executeQueryImp) {
		this.executeQueryImp = executeQueryImp;
	}

	public ActionForward tinfo(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		// TODO Auto-generated method stub
		TeamAdmin ta = (TeamAdmin) request.getSession().getAttribute(
				"teamadmin");
		String year = request.getParameter("year");
		if (year == null) {
			Object oyear = request.getSession().getAttribute("curYear");
			if (oyear == null)
				year = (new Date().getYear() + 1900) + "";
			else
				year = Integer.parseInt(oyear.toString()) + "";
		}
		int aid = 0;
		if (ta != null)
			aid = ta.getTeamArea().getAid();
		List<TeamInfo> ts = executeQueryImp.getTeamInfoByAid(aid, 1, 0, year);// 0表示不分页，获取全部数据
		String fileName = "参赛队详细信息(" + year + ")";
		String[] colnames = new String[] { "序号", "学校", "队名", "领队", "电话", "成员",
				"指导老师", "年份" };
		String[][] data = new String[ts.size()][colnames.length];
		for (int i = 0; i < ts.size(); ++i) {
			data[i][0] = (i + 1) + "";
			data[i][1] = ts.get(i).getSname();
			data[i][2] = ts.get(i).getTname();
			data[i][3] = ts.get(i).getMname();
			data[i][4] = ts.get(i).getMphone();
			data[i][5] = ts.get(i).getMembers();
			data[i][6] = ts.get(i).getTeachers();
			data[i][7] = year;
		}
		ExportExcel ee = new ExportExcel(response, fileName, colnames, data);
		ee.export();
		return null;
	}

	public ActionForward app(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		TeamAdmin t = (TeamAdmin) request.getSession()
				.getAttribute("teamadmin");
		String year = request.getParameter("year");
		System.out.println("year:" + year);
		if (year == null) {
			Object oyear = request.getSession().getAttribute("curYear");
			if (oyear == null)
				year = (new Date().getYear() + 1900) + "";
			else
				year = Integer.parseInt(oyear.toString()) + "";
		}
		int aid = 0;
		if (t != null)
			aid = t.getTeamArea().getAid();
		List<TeamApp> ta = executeQueryImp.getTeamApp(aid, 1, 0, year);// 第三个0表示获取全部的数据，不分页
		String fileName = "参赛队报名信息(" + year + ")";
		String[] colnames = new String[] { "序号", "学校", "队名", "领队", "成员",
				"指导教师", "项目", "人数下限", "人数上限", "状态", "年份" };
		String[][] data = new String[ta.size()][colnames.length];
		for (int i = 0; i < ta.size(); ++i) {
			data[i][0] = (i + 1) + "";
			data[i][1] = ta.get(i).getSname();
			data[i][2] = ta.get(i).getTname();
			data[i][3] = ta.get(i).getMname();
			data[i][4] = ta.get(i).getMembers();
			data[i][5] = ta.get(i).getTeacherName();
			data[i][6] = ta.get(i).getItname();
			data[i][7] = ta.get(i).getAppremark() + "";
			data[i][8] = ta.get(i).getApplimit() + "";
			data[i][9] = ta.get(i).getAppstates();
			data[i][10] = year;
		}
		ExportExcel ee = new ExportExcel(response, fileName, colnames, data);
		ee.export();
		return null;
	}

	public ActionForward itinfo(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		TeamAdmin t = (TeamAdmin) request.getSession()
				.getAttribute("teamadmin");
		String year = request.getParameter("year");
		if (year == null) {
			Object oyear = request.getSession().getAttribute("curYear");
			if (oyear == null)
				year = (new Date().getYear() + 1900) + "";
			else
				year = Integer.parseInt(oyear.toString()) + "";
		}
		int aid = 0;
		if (t != null)
			aid = t.getTeamArea().getAid();
		List<TeamItems> items = executeQueryImp.getAllItems();
		List<ItemInfo> res = new ArrayList<ItemInfo>();
		for (int i = 0; i < items.size(); ++i) {
			ItemInfo ii = new ItemInfo();
			ii.setItname(items.get(i).getItname());
			ii.setStudents(executeQueryImp.getItemInfo("学生", ii.getItname(),
					aid, year));
			ii.setTeachers(executeQueryImp.getItemInfo("教师", ii.getItname(),
					aid, year));
			ii.setSum_s_t(ii.getStudents() + ii.getTeachers());
			res.add(ii);
		}
		String fileName = "项目信息统计(" + year + ")";
		String[] colnames = new String[] { "序号", "项目名称", "参赛学生", "指导教师", "总计",
				"年份" };
		String[][] data = new String[res.size()][colnames.length];
		for (int i = 0; i < res.size(); ++i) {
			data[i][0] = (i + 1) + "";
			data[i][1] = res.get(i).getItname();
			data[i][2] = res.get(i).getStudents() + "";
			data[i][3] = res.get(i).getTeachers() + "";
			data[i][4] = res.get(i).getSum_s_t() + "";
			data[i][5] = year;
		}
		ExportExcel ee = new ExportExcel(response, fileName, colnames, data);
		ee.export();
		return null;
	}
}
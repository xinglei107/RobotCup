/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.robotcup.struts.action;

import java.util.Date;
import java.util.List;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;
import org.springframework.stereotype.Controller;

import com.robotcup.domain.TeamApplication;
import com.robotcup.domain.TeamMembers;
import com.robotcup.domain.TeamUser;
import com.robotcup.service.imp.ExecuteQueryImp;
import com.robotcup.service.imp.TeamManageServiceImp;

/**
 * MyEclipse Struts Creation date: 04-11-2014
 * 
 * XDoclet definition:
 * 
 * @struts.action parameter="method"
 */
@Controller
public class UpdateTeamMemberAction extends DispatchAction {
	/*
	 * Generated Methods
	 */

	/**
	 * Method execute
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	@Resource
	private TeamManageServiceImp teamManageServiceImp;

	public TeamManageServiceImp getTeamManageServiceImp() {
		return teamManageServiceImp;
	}

	public void setTeamManageServiceImp(
			TeamManageServiceImp teamManageServiceImp) {
		this.teamManageServiceImp = teamManageServiceImp;
	}

	@Resource
	private ExecuteQueryImp executeQueryImp;

	public ExecuteQueryImp getExecuteQueryImp() {
		return executeQueryImp;
	}

	public ActionForward showmember(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		// TODO Auto-generated method stub
		// int tid=Integer.parseInt(request.getParameter("tid"));

		TeamUser tu = (TeamUser) request.getSession().getAttribute("teamuser");
		if (tu == null) {
			return null;
		}
		int tid = tu.getTid();
		List<TeamMembers> teamMember = teamManageServiceImp
				.getTeamMembersByTid(tid);
		request.getSession().setAttribute("teamMember", teamMember);
		return mapping.findForward("showmember");
	}

	public ActionForward updatemember(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		// TODO Auto-generated method stub
		int mid = Integer.parseInt(request.getParameter("mid"));
		TeamMembers tm = teamManageServiceImp.getTeamMemberByMid(mid);
		// 将要修改的队员信息保存到teammeb里面，然后跳转到修改页面
		request.getSession().setAttribute("teammeb", tm);
		return mapping.findForward("updatemember");
	}

	public ActionForward addmember(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		// TODO Auto-generated method stub
		// 清空teammeb里面的信息后跳转到添加页面（添加修改是同一个页面）
		TeamUser tu = (TeamUser) request.getSession().getAttribute("teamuser");
		request.getSession().setAttribute("teammeb", null);
		int type = Integer.parseInt(request.getParameter("type"));
		if (type == 1) {
			String res = checkTea(tu, 1);// 等于null说明可以正常插入
			if (res == null) {
				request.setAttribute("type", type);
				return mapping.findForward("updatemember");
			} else {
				request.setAttribute("errMsg", "增加新的教师会导致已经报名的【" + res
						+ "】项目失效，您可以删除该项目后再增加或者取消增加。");
				return mapping.findForward("showmember");
			}
		} else {
			String res = checkStu(tu, 1);
			if (res == null) {
				request.setAttribute("type", type);
				return mapping.findForward("updatemember");
			} else {
				request.setAttribute("errMsg", "增加新的学生会导致已经报名的【" + res
						+ "】项目失效，您可以删除该项目后再增加或者取消增加。");
				return mapping.findForward("showmember");
			}
		}
	}

	public ActionForward del(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		// TODO Auto-generated method stub
		int mid = Integer.parseInt(request.getParameter("mid"));
		// 删除之前获取团队编号

		TeamMembers tm = teamManageServiceImp.getTeamMemberByMid(mid);
		// 判断删除是否会对已经报名的项目造成影响
		TeamUser tu=tm.getTeamUser();
		int tid = tu.getTid();
		int type=tm.getMtype().equals("教师")?1:0;
		if (type == 1) {
			String res = checkTea(tu, 0);// 等于null说明可以正常删除
			if (res == null) {
				// 删除
				teamManageServiceImp.delTeamMemberByMid(mid);
				// 删除后重新显示
				List<TeamMembers> teamMember = teamManageServiceImp
						.getTeamMembersByTid(tid);
				request.getSession().setAttribute("teamMember", teamMember);
				return mapping.findForward("showmember");
			} else {
				request.setAttribute("errMsg", "删除当前教师会导致已经报名的【" + res
						+ "】项目失效，您可以删除该项目后再删除教师或者取消删除。");
				return mapping.findForward("showmember");
			}
		} else {
			String res = checkStu(tu, 0);
			if (res == null) {
				// 删除
				teamManageServiceImp.delTeamMemberByMid(mid);
				// 删除后重新显示
				List<TeamMembers> teamMember = teamManageServiceImp
						.getTeamMembersByTid(tid);
				request.getSession().setAttribute("teamMember", teamMember);
				return mapping.findForward("showmember");
			} else {
				request.setAttribute("errMsg", "删除当前学生会导致已经报名的【" + res
						+ "】项目失效，您可以删除该项目后再删除学生或者取消删除。");
				return mapping.findForward("showmember");
			}
		}
	}

	private int getTeaNum(TeamUser tu) {
		String teachers = "";
		teachers = executeQueryImp.getTeamTeacherByTname(tu.getTname());
		String[] teas = teachers.split("、");
		int teaCount = 0;
		teaCount = teas.length;
		if (teachers.trim().length() < 1)
			teaCount = 0;
		return teaCount;
	}

	private int getStuNum(TeamUser tu) {
		String members = "";
		members = executeQueryImp.getTeamMemberByTname(tu.getTname());
		String[] mems = members.split("、");
		int memberCount = 0;
		memberCount = mems.length;// 队员人数
		if (members.trim().length() < 1)
			memberCount = 0;
		return memberCount;
	}

	private String checkStu(TeamUser tu, int calc) {
		int memberCount = getStuNum(tu);
		if (calc == 1) {
			memberCount++;
		} else {
			memberCount--;
		}
		String year = (new Date().getYear() + 1900) + "";
		List<TeamApplication> applist = teamManageServiceImp.getItemsByTid(
				tu.getTid(), year);

		for (int i = 0; i < applist.size(); i++) {
			TeamApplication u = applist.get(i);
			if (memberCount >= Integer.parseInt(u.getTeamItems().getItremark())
					&& memberCount <= u.getTeamItems().getItlimit()) {
				continue;
			}
			return u.getTeamItems().getItname();
		}
		return null;
	}

	private String checkTea(TeamUser tu, int calc) {
		int teaCount = getTeaNum(tu);
		if (calc == 1) {
			teaCount++;
		} else {
			teaCount--;
		}
		String year = (new Date().getYear() + 1900) + "";
		List<TeamApplication> applist = teamManageServiceImp.getItemsByTid(
				tu.getTid(), year);

		for (int i = 0; i < applist.size(); i++) {
			TeamApplication u = applist.get(i);
			if (teaCount >= u.getTeamItems().getIttealim()
					&& teaCount <= u.getTeamItems().getItteacap()) {
				continue;
			}
			return u.getTeamItems().getItname();
		}
		return null;
	}
	
	//判断是否有已经通过审核的项目
	private boolean isPass(TeamUser tu){
		String year = (new Date().getYear() + 1900) + "";
		List<TeamApplication> applist = teamManageServiceImp.getItemsByTid(
				tu.getTid(), year);
		for (int i = 0; i < applist.size(); i++) {
			TeamApplication u = applist.get(i);
			if (u.getAppstate()==1) {
				return true;
			}
		}
		return false;
	}
}
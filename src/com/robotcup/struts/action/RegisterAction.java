/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.robotcup.struts.action;

import java.io.IOException;
import java.io.PrintWriter;
import java.util.Date;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.springframework.stereotype.Controller;

import com.robotcup.domain.TeamUser;
import com.robotcup.parameter.Parameters;
import com.robotcup.service.imp.ExecuteQueryImp;
import com.robotcup.service.imp.TeamAdminServiceImp;
import com.robotcup.service.imp.TeamManageServiceImp;
import com.robotcup.struts.form.TeamUserForm;
import com.robotcup.util.MyTools;

/**
 * MyEclipse Struts Creation date: 03-30-2014
 * 
 * XDoclet definition:
 * 
 * @struts.action path="/register" name="teamUserForm" scope="request"
 *                validate="true"
 * 
 *                2015-09-22 增加注册信息的合法性验证
 */
@Controller
public class RegisterAction extends Action {
	/*
	 * Generated Methods
	 */

	/**
	 * Method execute
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	@Resource
	private TeamManageServiceImp teamManageServiceImp;
	@Resource
	private ExecuteQueryImp executeQueryImp;
	@Resource
	private TeamAdminServiceImp teamAdminServiceImp;

	public TeamAdminServiceImp getTeamAdminServiceImp() {
		return teamAdminServiceImp;
	}

	public void setTeamAdminServiceImp(TeamAdminServiceImp teamAdminServiceImp) {
		this.teamAdminServiceImp = teamAdminServiceImp;
	}

	public TeamManageServiceImp getTeamManageServiceImp() {
		return teamManageServiceImp;
	}

	public void setTeamManageServiceImp(
			TeamManageServiceImp teamManageServiceImp) {
		this.teamManageServiceImp = teamManageServiceImp;
	}

	public ExecuteQueryImp getExecuteQueryImp() {
		return executeQueryImp;
	}

	public void setExecuteQueryImp(ExecuteQueryImp executeQueryImp) {
		this.executeQueryImp = executeQueryImp;
	}

	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		TeamUserForm teamUserForm = (TeamUserForm) form;// TODO Auto-generated
														// method stub
		String tyear = (new Date().getYear() + 1900) + "";
		boolean ent = teamAdminServiceImp.getEntrance();
		if (!ent) {
			response.setContentType("text/html;charset=utf-8");
			PrintWriter out;
			try {
				out = response.getWriter();
				out.println("<script language='javascript' type='text/javascript'>");
				out.println("alert('报名入口已经关闭，无法报名!');window.location.href='"
						+ request.getContextPath() + "/index.do'");
				out.println("</script>");
				out.flush();
				out.close();
				return null;
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		// 验证队名的合法性
		if (!teamCheck(teamUserForm)) {
			try {
				response.setContentType("text/html;charset=utf-8");
				PrintWriter out = response.getWriter();
				out.println("<script language='javascript' type='text/javascript'>");
				out.println("alert('注册信息包含不合法的内容，请重新填写!');window.location.href='"
						+ request.getContextPath()
						+ "/redirect.do?method=register'");
				out.println("</script>");
				out.flush();
				out.close();
			} catch (Exception e) {
			}
			return null;
		}
		if (!teamManageServiceImp.isTeamRepeat(teamUserForm.getTname())) {
			TeamUser teamUser = new TeamUser();
			teamUser.setTname(teamUserForm.getTname());
			teamUser.setTpwd(MyTools.MD5(teamUserForm.getTpwd()));// 密码加密后存放
			teamUser.setTemail(teamUserForm.getTemail());
			teamUser.setTeamUnversity(executeQueryImp
					.getUniversityBySid(teamUserForm.getSid()));
			teamUser.setTremark(teamUserForm.getTremark());
			teamUser.setTyear(tyear);
			teamManageServiceImp.addTeam(teamUser);
			request.getSession().setAttribute("teamuser", teamUser);// could not
																	// initialize
																	// proxy -
																	// no
																	// Session
			return mapping.findForward("success");
		}
		try {
			response.setContentType("text/html;charset=utf-8");
			PrintWriter out = response.getWriter();
			out.println("<script language='javascript' type='text/javascript'>");
			out.println("alert('队名已经存在，请重新填写!');window.location.href='"
					+ request.getContextPath()
					+ "/redirect.do?method=register'");
			out.println("</script>");
			out.flush();
			out.close();
		} catch (Exception e) {
		}
		return null;
	}

	private boolean teamCheck(TeamUserForm teamUserForm) {
		String name = teamUserForm.getTname();
		String pwd = teamUserForm.getTpwd();
		String mail = teamUserForm.getTemail();
		int sid = teamUserForm.getSid();

		boolean nameRes = true;
		boolean pwdRes = true;
		boolean mailRes = true;
		boolean sidRes = true;

		for (String s : Parameters.XSSSTR) {
			if (name.contains(s)) {
				nameRes = false;
				break;
			}
		}

		if (name.trim().length() < 2 || name.trim().length() > 15)
			nameRes = false;

		if (pwd.trim().length() < 6 || name.trim().length() > 20) {
			pwdRes = false;
		}

		if (!checkEmail(mail)) {
			mailRes = false;
		}

		if (sid < 1) {
			sidRes = false;
		}

		if (nameRes && pwdRes && mailRes && sidRes) {
			return true;
		}
		return false;
	}

	private boolean checkEmail(String email) {
		boolean flag = false;
		try {
			String check = "^([a-z0-9A-Z]+[-|_|\\.]?)+[a-z0-9A-Z]@([a-z0-9A-Z]+(-[a-z0-9A-Z]+)?\\.)+[a-zA-Z]{2,}$";
			Pattern regex = Pattern.compile(check);
			Matcher matcher = regex.matcher(email);
			flag = matcher.matches();
		} catch (Exception e) {
			flag = false;
		}
		return flag;
	}
}